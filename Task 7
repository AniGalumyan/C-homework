Task 7
using System;

namespace QueenPlacement
{
    class Program
    {
        static int[,] chessboard = new int[8, 8]; // 8x8 chessboard

        static void Main(string[] args)
        {
            int row = 7;
            int col = 7;
            int flag = 0;

            Console.ForegroundColor = ConsoleColor.White;

            while (flag == 0)
            {
                AddQueen(row, col);
                VisualizeChessboard();

                int c = CountConflicts(row, col);

                if (c != 0)
                {
                    row = -1;
                    col = -1;
                    int minConflicts = 100;

                    for (int i = 0; i < 8; i++)
                    {
                        for (int j = 0; j < 8; j++)
                        {
                            if (chessboard[i, j] != 1 && chessboard[i, j] != 9)
                            {
                                int currentConflicts = CountConflicts(i, j);
                                if (currentConflicts <= minConflicts)
                                {
                                    minConflicts = currentConflicts;
                                    row = i;
                                    col = j;
                                }
                            }
                        }
                    }
                }
                else
                {
                    Console.WriteLine("No valid position for placing the queen.");
                    flag = 1;
                    break;
                }
            }
        }

        static void VisualizeChessboard()
        {
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (chessboard[i, j] == 9)
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.Write("Q ");
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    else if (chessboard[i, j] == 1)
                    {
                        Console.Write("1 ");
                    }
                    else
                    {
                        Console.Write("0 ");
                    }
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
        }

        static void AddQueen(int row, int col)
        {
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (row == i && col == j)
                    {
                        chessboard[i, j] = 9;
                    }
                    else if (chessboard[i, j] == 1 || chessboard[i, j] == 9)
                    {
                        continue;
                    }
                    else if ((Math.Abs(row - i) == Math.Abs(col - j)) || row == i || col == j)
                    {
                        chessboard[i, j] = 1;
                    }
                }
            }
        }

        static int CountConflicts(int row, int col)
        {
            int conflicts = 0;
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (row == i && col == j)
                    {
                        continue;
                    }
                    else if ((Math.Abs(row - i) == Math.Abs(col - j)) || row == i || col == j)
                    {
                        if (chessboard[i, j] == 0)
                        {
                            conflicts++;
                        }
                    }
                }
            }
            return conflicts;
        }
    }
Task 8 
using System;

namespace KnightTour
{
    class Program
    {
        static int[,] chessboard = {
            { 2, 3, 4, 4, 4, 4, 3, 2 },
            { 3, 4, 6, 6, 6, 6, 4, 3 },
            { 4, 6, 8, 8, 8, 8, 6, 4 },
            { 4, 6, 8, 8, 8, 8, 6, 4 },
            { 4, 6, 8, 8, 8, 8, 6, 4 },
            { 4, 6, 8, 8, 8, 8, 6, 4 },
            { 3, 4, 6, 6, 6, 6, 4, 3 },
            { 2, 3, 4, 4, 4, 4, 3, 2 },
        };

        static void Main(string[] args)
        {
            int row = 8;
            int col = 8;

            Console.ForegroundColor = ConsoleColor.White;

            KnightTour(row, col);
        }

        static void KnightTour(int row, int col)
        {
            int min = 9;
            int nextRow = 4;
            int nextCol = 3;

            for (int i = 1; i <= 8; i++)
            {
                for (int j = 1; j <= 8; j++)
                {
                    if (chessboard[i - 1, j - 1] == 9)
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.Write("K ");
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    else if ((Math.Abs(row - i) == 2 && Math.Abs(col - j) == 1) || (Math.Abs(row - i) == 1 && Math.Abs(col - j) == 2))
                    {
                        if (chessboard[i - 1, j - 1] < min)
                        {
                            min = chessboard[i - 1, j - 1];
                            nextRow = i;
                            nextCol = j;
                        }

                        Console.Write(chessboard[i - 1, j - 1] + " ");
                    }
                    else if (row == i && col == j)
                    {
                        chessboard[i - 1, j - 1] = 9;
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.Write("K ");
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    else
                    {
                        Console.Write("0 ");
                    }
                }
                Console.WriteLine();
                if (i == 8)
                {
                    Console.WriteLine();
                    Console.WriteLine();
                    Console.WriteLine();
                }
            }

            if (min != 9)
            {
                KnightTour(nextRow, nextCol);
            }
        }
    }
}
Task 9
1. public static void SolveQuadratic(double a, double b, double c, ref double x1, ref double x2)
{
    double D= b * b - 4 * a * c;
    if (D < 0)
    {
       ("No roots");
    }
    else if (D == 0)
    {
        x1 = x2 = -b / (2 * a);
    }
    else
    {
        x1 = (-b + Math.Sqrt(D)) / (2 * a);
        x2 = (-b - Math.Sqrt(D)) / (2 * a);
    }
} With  ref parameters
2.public static (double x1, double x2) SolveQuadratic(double a, double b, double c)
{
    double D = b * b - 4 * a * c;
    if (D < 0)
    {
       ("No  roots");
    }
    else if (D == 0)
    {
        return (-b / (2 * a), -b / (2 * a));
    }
    else
    {
        return ((-b + Math.Sqrt(D)) / (2 * a), (-b - Math.Sqrt(D)) / (2 * a));
    }
}
with tuple
3.public class QuadraticEquationSolver
{
    private double a, b, c;

    public QuadraticEquationSolver(double a, double b, double c)
    {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    public void Solve(out double x1, out double x2)
    {
        double D = b * b - 4 * a * c;
        if (D < 0)
        {
            ("No roots");
        }
        else if (D == 0)
        {
            x1 = x2 = -b / (2 * a);
        }
        else
        {
            x1 = (-b + Math.Sqrt(D)) / (2 * a);
            x2 = (-b - Math.Sqrt(D)) / (2 * a);
        }
    }
}
With Deconstructing in class
4.public static double[] SolveQuadratic(double a, double b, double c)
{
    double D = b * b - 4 * a * c;
    if (D < 0)
    {
        ("No roots");
    }
    else if (D == 0)
    {
        return new double[] { -b / (2 * a) };
    }
    else
    {
        return new double[] { (-b + Math.Sqrt(D)) / (2 * a), (-b - Math.Sqrt(D)) / (2 * a) };
    }
}
With Array
